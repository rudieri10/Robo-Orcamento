# main.py - Vers√£o FINAL, COMPLETA E CORRIGIDA

import logging
import sys
import time
import pyautogui
import xlwings as xw
from pathlib import Path

# --- Imports dos outros m√≥dulos do projeto ---
from login import configurar_logging
from cesar_modulo import (
    encontrar_proxima_linha_sem_pa_coluna_b,
    ler_planilha_dados_linha_especifica
)
from insercao_dados import (
    navegar_7_tabs,
    inserir_dados_planilha,
    executar_processo_completo_com_insercao
)

# ‚úÖ IMPORTAR CONFIGURA√á√ïES
from config import EMPRESA_PADRAO, TABS_INICIAIS

# ==============================================================================
# SE√á√ÉO DE FUN√á√ïES DE CONTROLO E REIN√çCIO
# ==============================================================================

def aguardar_janela_informacao_sair():
    """
    Fun√ß√£o de seguran√ßa que aguarda a janela 'informacao.PNG' sair da tela,
    pressionando Enter para tentar fech√°-la.
    """
    try:
        logging.info("üîç Verificando se a janela de informa√ß√£o precisa ser fechada...")
        
        if not Path("img/informacao.PNG").exists():
            logging.warning("‚ö†Ô∏è Arquivo img/informacao.PNG n√£o encontrado, pulando verifica√ß√£o.")
            return True
        
        tempo_limite = 10  # Tenta por 10 segundos
        tempo_inicio = time.time()
        
        while time.time() - tempo_inicio < tempo_limite:
            try:
                localizacao = pyautogui.locateOnScreen("img/informacao.PNG", confidence=0.7)
                if localizacao:
                    logging.info("üìã Janela de informa√ß√£o ainda vis√≠vel. Pressionando Enter para fechar...")
                    pyautogui.press("enter")
                    time.sleep(1)
                else:
                    logging.info("‚úÖ Janela de informa√ß√£o n√£o est√° na tela.")
                    return True
            except pyautogui.ImageNotFoundException:
                logging.info("‚úÖ Janela de informa√ß√£o n√£o est√° na tela.")
                return True
        
        logging.warning("‚ö†Ô∏è Timeout aguardando janela de informa√ß√£o sair.")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå Erro ao aguardar janela sair: {e}")
        return True

def obter_dimensoes_tela():
    """ Obt√©m as dimens√µes da tela. """
    try:
        size = pyautogui.size()
        logging.info(f"Dimens√µes da tela: {size.width}x{size.height}")
        return size.width, size.height
    except Exception as e:
        logging.error(f"Erro ao obter dimens√µes da tela: {e}")
        return 1920, 1080

def executar_sequencia_reinicio():
    """
    Executa a sequ√™ncia de rein√≠cio SIMPLIFICADA para cadastro do pr√≥ximo item.
    1. Clica no centro da tela para garantir o foco no programa.
    2. Pressiona Home para reposicionar o cursor para a pr√≥xima inser√ß√£o.
    """
    try:
        logging.info("üîÑ === INICIANDO SEQU√äNCIA DE REIN√çCIO (SIMPLIFICADA) ===")
        
        # Mantemos esta verifica√ß√£o por seguran√ßa, para fechar pop-ups antigos.
        aguardar_janela_informacao_sair()

        largura_tela, altura_tela = obter_dimensoes_tela()
        meio_x, meio_y = largura_tela // 2, altura_tela // 2

        # Passo 1: Mover para o centro e clicar para garantir o foco
        logging.info(f"Passo 1: Movendo mouse para o centro ({meio_x}, {meio_y}) e clicando.")
        pyautogui.moveTo(meio_x, meio_y, duration=0.5)
        pyautogui.click()
        time.sleep(1)

        # Passo 2: Pressionar Home
        logging.info("Passo 2: Pressionando Home.")
        pyautogui.press('home')
        time.sleep(0.5)
        
        logging.info("‚úÖ Sequ√™ncia de rein√≠cio SIMPLIFICADA executada com sucesso!")
        return True

    except Exception as e:
        logging.error(f"‚ùå Erro na sequ√™ncia de rein√≠cio simplificada: {e}")
        return False

def processar_linha_especifica(linha):
    """ 
    Processa uma linha da planilha (a partir da segunda).
    """
    try:
        logging.info(f"üìã PROCESSANDO LINHA {linha}...")
        
        dados = ler_planilha_dados_linha_especifica(linha)
        if not dados: 
            return False
        
        if dados.get('B'):
            logging.info(f"‚è≠Ô∏è Linha {linha} j√° tem PA na coluna B: {dados.get('B')} - PULANDO")
            return True

        # Inserir dados da planilha
        if not inserir_dados_planilha(dados): 
            return False
        
        logging.info(f"‚úÖ Linha {linha} processada com sucesso!")
        return True
        
    except Exception as e:
        logging.error(f"‚ùå Erro ao processar linha {linha}: {e}")
        return False

def executar_cadastro_completo():
    """ 
    Fun√ß√£o principal que executa o cadastro completo com l√≥gica de erro corrigida. 
    """
    logging.info("üöÄ === INICIANDO CADASTRO COMPLETO A PARTIR DO MAIN ===")
    linhas_processadas_sucesso, linhas_com_erro = 0, 0
    
    while True:
        linha_atual = encontrar_proxima_linha_sem_pa_coluna_b()
        if linha_atual is None:
            logging.info("üéâ === TODAS AS LINHAS FORAM PROCESSADAS! ===")
            break
        
        logging.info(f"\n{'='*80}\nüìå PROCESSANDO LINHA {linha_atual} (Sucesso: {linhas_processadas_sucesso}, Falhas: {linhas_com_erro})\n{'='*80}")
        
        # L√≥gica para a primeira linha da execu√ß√£o
        if linhas_processadas_sucesso == 0 and linhas_com_erro == 0:
            logging.info("üîë PRIMEIRA LINHA - Executando processo completo com login...")
            if executar_processo_completo_com_insercao(numero_empresa=EMPRESA_PADRAO):
                linhas_processadas_sucesso += 1
            else:
                linhas_com_erro += 1
        
        # L√≥gica para as linhas seguintes
        else:
            logging.info(f"üîÑ LINHA SEGUINTE ({linha_atual}) - Executando sequ√™ncia de rein√≠cio...")
            # Primeiro executa o rein√≠cio, e S√ì SE ele funcionar, processa a linha
            if executar_sequencia_reinicio():
                if processar_linha_especifica(linha_atual):
                    linhas_processadas_sucesso += 1
                else:
                    linhas_com_erro += 1
            else:
                logging.error(f"Falha na sequ√™ncia de rein√≠cio para a linha {linha_atual}. Pulando.")
                linhas_com_erro += 1

        logging.info("‚è∏Ô∏è Pausa ")
        time.sleep(1)
    
    logging.info(f"\n{'='*80}\nüèÅ === CADASTRO COMPLETO FINALIZADO ===\n   ‚úÖ Sucesso: {linhas_processadas_sucesso}\n   ‚ùå Falhas: {linhas_com_erro}\n{'='*80}")
    return linhas_com_erro == 0

# ==============================================================================
# PONTO DE ENTRADA PRINCIPAL DO ROB√î
# ==============================================================================
if __name__ == "__main__":
    configurar_logging()
    try:
        if executar_cadastro_completo():
            logging.info("üéâ === ROB√î EXECUTADO COM SUCESSO TOTAL! ===")
        else:
            logging.info("‚ö†Ô∏è === ROB√î CONCLU√çDO, MAS COM REGISTRO DE FALHAS. Verifique os logs. ===")
        
        logging.info("Sistema finalizado. Pressione Ctrl+C para sair.")
        while True: 
            time.sleep(10)
    except KeyboardInterrupt:
        logging.info("\nüõë Execu√ß√£o interrompida pelo usu√°rio.")
        sys.exit(0)
    except Exception as e:
        logging.error(f"üí• ERRO INESPERADO E FATAL NO MAIN: {e}", exc_info=True)
        sys.exit(1)