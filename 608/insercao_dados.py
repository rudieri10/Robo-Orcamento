# insercao_dados.py
import pyautogui
import time
import logging
import sys
import re
import xlwings as xw
from pathlib import Path
from cesar_modulo import executar_processo_completo, configurar_logging, encontrar_planilha_mais_recente
import os 
from PIL import Image

# ‚úÖ IMPORTAR CONFIGURA√á√ïES
from config import ABA_NUMERO, ABA_TEXTO_BUSCA, COLUNAS_PARA_PREENCHER, INTERVALO_ENTRE_ACOES, EMPRESA_PADRAO, TABS_INICIAIS

# Configura√ß√£o do pyautogui
pyautogui.PAUSE = 0.1
pyautogui.FAILSAFE = True

def formatar_valor(valor):
    """
    Formatar valor removendo decimais desnecess√°rios
    
    Args:
        valor: Valor a ser formatado
        
    Returns:
        str: Valor formatado como string
    """
    # Verificar se o valor √© 0
    if valor == 0:
        return "0"
    
    if not valor:
        return ""
    
    # Se for float e for um n√∫mero inteiro (ex: 570.0), converter para int
    if isinstance(valor, float) and valor.is_integer():
        return str(int(valor))
    
    return str(valor)

def navegar_7_tabs():
    """
    Navega pressionando Tab conforme configurado
    
    Returns:
        bool: True se navegou com sucesso, False caso contr√°rio
    """
    try:
        logging.info(f"Navegando com {TABS_INICIAIS}x Tab...")
        
        # Aguardar um tempo para garantir que a tela est√° carregada
        time.sleep(1)
        
        # Pressionar Tab conforme configurado
        for i in range(TABS_INICIAIS):
            pyautogui.press("tab")
            logging.info(f"Tab {i+1}/{TABS_INICIAIS} pressionado")
            time.sleep(0.3)
        
        logging.info(f"Navega√ß√£o com {TABS_INICIAIS}x Tab conclu√≠da!")
        time.sleep(1)
        
        return True
        
    except Exception as e:
        logging.error(f"Erro ao navegar com {TABS_INICIAIS}x Tab: {e}")
        return False

def inserir_dados_planilha_completa(dados):
    """
    Insere os dados nas colunas configuradas sequencialmente
    
    Args:
        dados: Dicion√°rio com os dados da planilha
    
    Returns:
        bool: True se inseriu com sucesso, False caso contr√°rio
    """
    try:
        logging.info("=== INSER√á√ÉO SEQUENCIAL CONFIGURADA ===")
        logging.info(f"Preenchendo colunas: {COLUNAS_PARA_PREENCHER[0]} at√© {COLUNAS_PARA_PREENCHER[-1]}")
        logging.info(f"Total de colunas: {len(COLUNAS_PARA_PREENCHER)}")
        
        # Aguardar estar no configurador
        time.sleep(1)
        
        # Inserir cada coluna sequencialmente
        for i, coluna in enumerate(COLUNAS_PARA_PREENCHER):
            valor = formatar_valor(dados.get(coluna, ''))
            logging.info(f"üìù INSERINDO {coluna}: '{valor}'")
            
            # Inserir valor se n√£o estiver vazio
            if valor:
                pyautogui.write(valor)
            
            time.sleep(INTERVALO_ENTRE_ACOES)
            
            # Se n√£o for a √∫ltima coluna, pressiona tab
            if i < len(COLUNAS_PARA_PREENCHER) - 1:
                pyautogui.press("tab")
                time.sleep(INTERVALO_ENTRE_ACOES)
        
        # Pressionar F2 para finalizar
        logging.info("Pressionando F2 para finalizar...")
        pyautogui.press("f2")
        
        # Aguardar um tempo ap√≥s F2
        logging.info("Aguardando ap√≥s F2...")
        time.sleep(3)
        
        logging.info("‚úÖ Inser√ß√£o configurada conclu√≠da!")
        return True
        
    except Exception as e:
        logging.error(f"Erro ao inserir dados configurados: {e}")
        return False

def extrair_codigo_pa_do_texto(texto):
    """
    Extrai o c√≥digo PA do texto, corrigindo erros comuns de OCR (S->5, B->8, T->7)
    e garantindo que o resultado final cont√©m apenas n√∫meros ap√≥s 'PA'.
    """
    try:
        if not texto or not texto.strip():
            logging.warning("Texto vazio para extrair PA")
            return None
        
        logging.info(f"Texto original do OCR: {repr(texto)}")
        
        texto_limpo = texto.replace('\n', ' ').replace('\r', ' ')
        
        # --- NOVA REGRA DE CORRE√á√ÉO DE OCR ---
        # Substitui letras que s√£o frequentemente confundidas com n√∫meros.
        # Adicionei mais algumas corre√ß√µes comuns como O->0 e I->1.
        correcoes = {'S': '5', 'B': '8', 'T': '7', 'O': '0', 'I': '1'}
        texto_corrigido = texto_limpo.upper() # Converte para mai√∫sculas para pegar 's', 'b', etc.
        for letra, numero in correcoes.items():
            texto_corrigido = texto_corrigido.replace(letra, numero)
        
        logging.info(f"Texto ap√≥s corre√ß√µes autom√°ticas: {repr(texto_corrigido)}")

        # --- NOVA REGRA DE REGEX: APENAS N√öMEROS ---
        # Voltamos a usar \d para garantir que apenas d√≠gitos s√£o capturados.
        padroes = [
            r'ITEM\s*[\'"]?PA(\d{4,8})[\'"]?',
            r'CADASTRAD[AO]\s+PARA\s+O\s+ITEM\s*[\'"]?PA(\d{4,8})[\'"]?',
            r'PA(\d{4,8})',
            # O padr√£o BA √© mantido para caso o OCR erre o 'P' de 'PA'
            r'BA(\d{4,8})', 
        ]
        
        for i, padrao in enumerate(padroes):
            logging.info(f"Testando padr√£o num√©rico {i+1}: {padrao}")
            # Usamos o texto corrigido e em mai√∫sculas para a busca
            matches = re.findall(padrao, texto_corrigido)
            
            if matches:
                numero_extraido = max(matches, key=len)
                codigo_pa = f"PA{numero_extraido}"
                
                logging.info(f"‚úì SUCESSO! PA num√©rico extra√≠do com padr√£o {i+1}: {codigo_pa}")
                return codigo_pa
        
        logging.warning("NENHUM c√≥digo PA num√©rico encontrado no texto, mesmo ap√≥s corre√ß√µes.")
        logging.warning(f"Texto original analisado: {texto_limpo[:200]}...")
        return None
        
    except Exception as e:
        logging.error(f"ERRO ao extrair c√≥digo PA: {e}")
        return None

def extrair_pa_da_janela_informacao(localizacao):
    """
    Extrai o PA da janela com PR√â-PROCESSAMENTO DE IMAGEM para melhorar o OCR.
    """
    try:
        logging.info(f"Extraindo PA da janela na posi√ß√£o: {localizacao}")
        
        margem_esquerda, margem_direita, margem_cima, margem_baixo = 50, 400, 50, 200
        left = max(0, int(localizacao.left) - margem_esquerda)
        top = max(0, int(localizacao.top) - margem_cima)
        width = int(localizacao.width) + margem_esquerda + margem_direita
        height = int(localizacao.height) + margem_cima + margem_baixo
        
        logging.info(f"Capturando regi√£o da tela para OCR...")
        screenshot_janela = pyautogui.screenshot(region=(left, top, width, height))

        # --- NOVO BLOCO DE PR√â-PROCESSAMENTO DE IMAGEM ---
        logging.info("Iniciando pr√©-processamento da imagem para melhorar a leitura...")
        
        # Converte a captura de tela para um objeto de imagem do Pillow
        img = Image.frombytes('RGB', screenshot_janela.size, screenshot_janela.tobytes())
        
        # 1. Converte para escala de cinza
        img = img.convert('L')
        
        # 2. Redimensiona a imagem (upscaling) - Tesseract gosta de imagens maiores
        largura, altura = img.size
        img = img.resize((largura * 3, altura * 3), Image.LANCZOS)
        
        # 3. Binariza√ß√£o (Thresholding) - Converte para preto e branco puro
        # Pixels mais escuros que um limiar (180) ficam pretos (0), mais claros ficam brancos (255)
        # Este valor (180) pode ser ajustado se necess√°rio, mas √© um bom ponto de partida.
        threshold = 180 
        img = img.point(lambda p: 255 if p > threshold else 0)
        
        # Salva a imagem processada para vermos exatamente o que o OCR est√° a tentar ler.
        try:
            nome_debug_ocr = f"DEBUG_imagem_para_ocr_{int(time.time())}.png"
            img.save(nome_debug_ocr)
            logging.info(f"üíæ Imagem pr√©-processada para OCR salva como: {nome_debug_ocr}")
        except Exception as e_save:
            logging.warning(f"N√£o foi poss√≠vel salvar a imagem de debug do OCR: {e_save}")
        
        # --- FIM DO BLOCO DE PR√â-PROCESSAMENTO ---

        try:
            import pytesseract
            # Envia a IMAGEM TRATADA para o Pytesseract, n√£o a original
            texto_janela = pytesseract.image_to_string(img, lang='por', config=r'--oem 3 --psm 6')
            logging.info(f"üìÑ TEXTO EXTRA√çDO DA IMAGEM PROCESSADA:\n{texto_janela}")
            
            codigo_pa = extrair_codigo_pa_do_texto(texto_janela)
            
            pyautogui.press("enter")
            time.sleep(1)
            
            if codigo_pa:
                logging.info(f"‚úÖ PA EXTRA√çDO: {codigo_pa}")
            else:
                logging.warning("‚ö†Ô∏è PA N√ÉO foi extra√≠do da regi√£o marcada")
            
            return codigo_pa
            
        except ImportError:
            logging.error("‚ùå A biblioteca 'pytesseract' n√£o est√° instalada!")
            pyautogui.press("enter")
            return "ERRO_SEM_OCR"
        except Exception as e:
            logging.error(f"‚ùå Erro durante o processo de OCR: {e}")
            pyautogui.press("enter")
            return "ERRO_OCR"
            
    except Exception as e:
        logging.error(f"Erro ao extrair PA da janela: {e}")
        try:
            pyautogui.press("enter", failsafe=False)
        except:
            pass
        return None

def processar_apos_f2():
    """
    Processa o que acontece ap√≥s pressionar F2
    FLUXO CORRETO:
    1. Se aparecer img/CONFIRMAR.PNG = item NOVO ‚Üí clica SIM ‚Üí espera informacao.PNG ‚Üí extrai PA
    2. Se aparecer img/informacao.PNG direto = item J√Å CADASTRADO ‚Üí extrai PA direto
    
    Returns:
        str ou None: C√≥digo PA extra√≠do ou None se n√£o encontrou
    """
    try:
        logging.info("=== PROCESSANDO RESULTADO AP√ìS F2 ===")
        
        # Aguardar um tempo para alguma janela aparecer
        time.sleep(3)
        
        # Procurar por ambas as imagens por at√© 20 segundos
        tempo_limite = 20
        tempo_inicio = time.time()
        tentativa = 0
        
        while time.time() - tempo_inicio < tempo_limite:
            tentativa += 1
            
            if tentativa % 5 == 0:  # Log a cada 5 tentativas
                logging.info(f"Tentativa {tentativa}: Verificando janelas ap√≥s F2...")
            
            try:
                # PRIMEIRO: Verificar se apareceu img/CONFIRMAR.PNG (item NOVO)
                try:
                    localizacao_confirmar = pyautogui.locateOnScreen("img/CONFIRMAR.PNG", confidence=0.7)
                    if localizacao_confirmar:
                        logging.info("üÜï ITEM NOVO DETECTADO - janela CONFIRMAR.PNG encontrada!")
                        
                        # Clicar em SIM
                        if not clicar_sim():
                            logging.error("Falha ao clicar em SIM")
                            return None
                        
                        # Aguardar processamento
                        logging.info("Aguardando sistema processar ap√≥s SIM...")
                        time.sleep(5)
                        
                        # Agora aguardar img/informacao.PNG aparecer
                        logging.info("Aguardando janela informacao.PNG aparecer ap√≥s SIM...")
                        return aguardar_informacao_apos_sim()
                        
                except pyautogui.ImageNotFoundException:
                    pass
                
                # SEGUNDO: Verificar se apareceu img/informacao.PNG direto (item J√Å CADASTRADO)
                try:
                    localizacao_info = pyautogui.locateOnScreen("img/informacao.PNG", confidence=0.7)
                    if localizacao_info:
                        logging.info("‚ôªÔ∏è ITEM J√Å CADASTRADO - janela informacao.PNG encontrada diretamente!")
                        return extrair_pa_da_janela_informacao(localizacao_info)
                except pyautogui.ImageNotFoundException:
                    pass
                
            except Exception as e:
                logging.warning(f"Erro ao procurar janelas (tentativa {tentativa}): {e}")
            
            time.sleep(1)
        
        logging.warning("‚ö†Ô∏è Nenhuma janela encontrada ap√≥s F2 no tempo limite")
        return None
        
    except Exception as e:
        logging.error(f"Erro ao processar ap√≥s F2: {e}")
        return None

def clicar_sim():
    """
    Clica especificamente no bot√£o SIM quando aparece janela de confirma√ß√£o
    
    Returns:
        bool: True se clicou com sucesso
    """
    try:
        logging.info("üéØ Procurando e clicando em img/SIM.PNG...")
        
        if not Path("img/SIM.PNG").exists():
            logging.error("‚ùå Arquivo img/SIM.PNG n√£o encontrado!")
            return False
        
        # Procurar e clicar em SIM por at√© 10 segundos
        tempo_limite = 10
        tempo_inicio = time.time()
        
        while time.time() - tempo_inicio < tempo_limite:
            try:
                localizacao_sim = pyautogui.locateOnScreen("img/SIM.PNG", confidence=0.8)
                if localizacao_sim:
                    centro_sim = pyautogui.center(localizacao_sim)
                    pyautogui.click(centro_sim)
                    logging.info(f"‚úÖ SIM clicado com sucesso na posi√ß√£o: {centro_sim}")
                    return True
            except pyautogui.ImageNotFoundException:
                pass
            time.sleep(0.5)
        
        logging.error("‚ùå N√£o foi poss√≠vel encontrar/clicar em img/SIM.PNG no tempo limite")
        return False
        
    except Exception as e:
        logging.error(f"Erro ao clicar em SIM: {e}")
        return False

def aguardar_informacao_apos_sim():
    """
    Aguarda especificamente a janela img/informacao.PNG aparecer AP√ìS clicar em SIM
    e extrai o PA
    
    Returns:
        str ou None: C√≥digo PA extra√≠do ou None se n√£o encontrou
    """
    try:
        logging.info("‚è≥ Aguardando janela informacao.PNG aparecer ap√≥s confirmar item novo...")
        
        # Verificar se a imagem existe
        if not Path("img/informacao.PNG").exists():
            logging.error("‚ùå Arquivo img/informacao.PNG n√£o encontrado!")
            return None
        
        # Aguardar pela janela informacao.PNG por at√© 30 segundos
        tempo_limite = 30
        tempo_inicio = time.time()
        tentativa = 0
        
        while time.time() - tempo_inicio < tempo_limite:
            tentativa += 1
            try:
                if tentativa % 10 == 0:  # Log a cada 10 tentativas
                    logging.info(f"Tentativa {tentativa}: Aguardando janela informacao.PNG...")
                
                # Procurar a imagem informacao.PNG na tela
                localizacao = pyautogui.locateOnScreen("img/informacao.PNG", confidence=0.7)
                
                if localizacao:
                    logging.info("üéâ Janela informacao.PNG encontrada ap√≥s cadastro!")
                    time.sleep(2)  # Aguardar carregar
                    return extrair_pa_da_janela_informacao(localizacao)
                    
            except pyautogui.ImageNotFoundException:
                pass
            except Exception as e:
                logging.warning(f"Erro ao aguardar janela (tentativa {tentativa}): {e}")
            
            time.sleep(1)
        
        logging.error("‚ùå Janela informacao.PNG N√ÉO apareceu no tempo limite ap√≥s SIM")
        return None
        
    except Exception as e:
        logging.error(f"Erro ao aguardar janela informacao: {e}")
        return None

def salvar_codigo_pa_na_planilha(codigo_pa, linha_processada):
    """
    Salva o c√≥digo PA na coluna B da aba configurada
    
    Args:
        codigo_pa: C√≥digo PA para salvar
        linha_processada: N√∫mero da linha que est√° sendo processada
        
    Returns:
        bool: True se salvou com sucesso
    """
    app = None
    wb = None
    try:
        if not codigo_pa or codigo_pa in ["ERRO_SEM_OCR", "ERRO_OCR"]:
            logging.warning("C√≥digo PA inv√°lido, n√£o salvando na planilha")
            return False
        
        if not linha_processada:
            logging.error("Linha processada n√£o informada")
            return False
        
        # ‚úÖ IMPORT GEN√âRICO
        from cesar_modulo import encontrar_planilha_mais_recente, encontrar_aba_configurada
        caminho_planilha = encontrar_planilha_mais_recente()
        if not caminho_planilha:
            logging.error("N√£o foi poss√≠vel encontrar planilha para salvar PA")
            return False
        
        logging.info(f"Abrindo planilha '{os.path.basename(caminho_planilha)}' para salvar o PA...")
        app = xw.App(visible=False)
        wb = app.books.open(caminho_planilha)
        
        # BUSCAR A ABA CONFIGURADA
        ws = encontrar_aba_configurada(wb)
        if not ws:
            logging.error(f"N√£o foi poss√≠vel encontrar aba configurada {ABA_TEXTO_BUSCA} para salvar PA")
            wb.close()
            app.quit()
            return False
        
        logging.info(f"Usando aba: {ws.name}")
        logging.info(f"Escrevendo o c√≥digo '{codigo_pa}' na c√©lula B{linha_processada}...")
        ws.range(f'B{linha_processada}').value = codigo_pa
        
        logging.info("Salvando o ficheiro Excel...")
        wb.save()
        logging.info("Fechando o ficheiro Excel...")
        wb.close()
        logging.info("Encerrando a inst√¢ncia do Excel...")
        app.quit()
        
        logging.info("Aguardando 1 segundo para garantir que o ficheiro foi atualizado na rede...")
        time.sleep(1)
        
        logging.info(f"‚úÖ C√≥digo PA salvo na aba configurada - linha {linha_processada}.")
        return True
        
    except Exception as e:
        logging.error(f"Erro ao salvar c√≥digo PA na planilha: {e}", exc_info=True)
        if wb: 
            try:
                wb.close()
            except:
                pass
        if app: 
            try:
                app.quit()
            except:
                pass
        return False

def inserir_dados_planilha(dados):
    """
    Fun√ß√£o principal para inserir dados da planilha (atualizada)
    """
    try:
        linha_atual = dados.get('linha_usada')
        if not linha_atual:
            logging.error("Linha atual n√£o encontrada nos dados.")
            return False
        
        logging.info(f"Processando linha {linha_atual}")
        
        # Usar a fun√ß√£o de inser√ß√£o configurada
        if not inserir_dados_planilha_completa(dados):
            return False
        
        # Ap√≥s F2, tenta obter o c√≥digo PA
        codigo_pa = processar_apos_f2()
        
        # SE N√ÉO OBTEVE O C√ìDIGO PA
        if not codigo_pa:
            logging.warning("‚úó C√≥digo PA n√£o foi obtido. Salvando status de erro na planilha.")
            # Tenta salvar a tag de erro para n√£o processar esta linha novamente
            salvar_codigo_pa_na_planilha("ERRO_OCR", linha_atual)
            # Retorna False para que o loop principal saiba que esta linha falhou
            return False

        # SE OBTEVE O C√ìDIGO, TENTA SALVAR
        if not salvar_codigo_pa_na_planilha(codigo_pa, linha_atual):
            logging.warning("‚úó Falha ao salvar o c√≥digo PA na planilha.")
            # Tamb√©m retorna False se o salvamento falhar
            return False
            
        # Apenas retorna True se TUDO deu certo (obteve o PA e salvou)
        return True
        
    except Exception as e:
        logging.error(f"Erro ao inserir dados da planilha: {e}")
        return False

def executar_processo_completo_com_insercao(numero_empresa=None):
    """
    Executa o processo completo: login + configurador + pesquisa + navega√ß√£o + inser√ß√£o dados
    
    Args:
        numero_empresa: N√∫mero da empresa para login
    
    Returns:
        bool: True se todo o processo foi bem-sucedido
    """
    try:
        if numero_empresa is None:
            numero_empresa = EMPRESA_PADRAO
            
        logging.info("=== INICIANDO PROCESSO COMPLETO COM INSER√á√ÉO ===")
        
        # Passo 1: Executar processo at√© acessar o tipo da planilha
        sucesso, numero, dados = executar_processo_completo(numero_empresa=numero_empresa)
        if not sucesso:
            logging.error("Falha no processo inicial (login + configurador + pesquisa)")
            return False
        
        # Aguardar um tempo adicional para garantir que a tela carregou
        time.sleep(2)
        
        # Passo 2: Navegar com tabs configurados
        if not navegar_7_tabs():
            logging.error(f"Falha ao navegar com {TABS_INICIAIS}x Tab")
            return False
        
        # Passo 3: Inserir dados da planilha e verificar PA
        if not inserir_dados_planilha(dados):
            logging.error("Falha ao inserir dados da planilha")
            return False
        
        logging.info("=== PROCESSO COMPLETO COM INSER√á√ÉO FINALIZADO ===")
        return True
        
    except Exception as e:
        logging.error(f"Erro no processo completo com inser√ß√£o: {e}")
        return False

def main():
    """Fun√ß√£o principal do m√≥dulo de inser√ß√£o de dados"""
    configurar_logging()
    
    try:
        logging.info("=== INICIANDO M√ìDULO DE INSER√á√ÉO DE DADOS ===")
        
        # Verificar se imagens necess√°rias existem
        imagens_necessarias = [
            "img/informacao.PNG",
            "img/CONFIRMAR.PNG", 
            "img/SIM.PNG"
        ]
        
        for imagem in imagens_necessarias:
            if not Path(imagem).exists():
                logging.warning(f"Arquivo {imagem} n√£o encontrado - funcionalidade pode n√£o funcionar")
        
        # Executar processo completo UMA √öNICA VEZ
        sucesso = executar_processo_completo_com_insercao(numero_empresa=EMPRESA_PADRAO)
        
        if sucesso:
            logging.info("=== M√ìDULO DE INSER√á√ÉO EXECUTADO COM SUCESSO ===")
            logging.info("Linha processada com sucesso!")
            
            # Manter programa ativo para intera√ß√£o manual
            logging.info("Sistema finalizado. Pressione Ctrl+C para sair.")
            try:
                while True:
                    time.sleep(10)
            except KeyboardInterrupt:
                logging.info("Finalizando m√≥dulo de inser√ß√£o...")
        else:
            logging.error("=== FALHA NA EXECU√á√ÉO DO M√ìDULO DE INSER√á√ÉO ===")
            return False
            
    except KeyboardInterrupt:
        logging.info("Execu√ß√£o interrompida pelo usu√°rio")
        return True
    except Exception as e:
        logging.error(f"Erro inesperado no m√≥dulo de inser√ß√£o: {e}")
        return False

if __name__ == "__main__":
    sucesso = main()
    sys.exit(0 if sucesso else 1)